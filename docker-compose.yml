services:
  postgres:
    restart: always
    image: postgres:17-bookworm
    hostname: postgres
    container_name: postgres
    user: postgres
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - postgres:/home/postgres/pgdata/
    networks:
      - internal
    environment:
      - POSTGRES_DB=rekono
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  
  redis:
    restart: always
    image: redis:8-bookworm
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    hostname: redis
    container_name: redis
    user: redis
    expose:
      - 6379
    networks:
      - internal

  initializer:
    restart: 'no'
    image: pablosnt/rekono-backend:unstable
    command: uv run --no-dev python -c "import os; os.system('uv run --no-dev manage.py migrate'); os.system('uv run --no-dev manage.py createsuperuser --no-input')"
    container_name: initializer
    volumes:
      - rekono:/rekono
    networks:
      - internal
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - DJANGO_SUPERUSER_EMAIL=${RKN_EMAIL:-rekono@rekono.com}
      - DJANGO_SUPERUSER_USERNAME=${RKN_USERNAME:-rekono}
      - DJANGO_SUPERUSER_PASSWORD=${RKN_PASSWORD:-rekono}
  
  tasks-worker:
    restart: always
    image: pablosnt/rekono-backend:unstable
    command: uv run --no-dev manage.py rqworker tasks
    hostname: tasks-worker
    volumes:
      - rekono:/rekono
    networks:
      - internal
    depends_on:
      redis:
        condition: service_healthy
      initializer:
        condition: service_completed_successfully
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis

  # executions-worker:
  #   restart: always
  #   image: pablosnt/rekono-worker:unstable
  #   command: uv run --no-dev manage.py rqworker executions
  #   hostname: executions-worker
  #   volumes:
  #     - rekono:/rekono
  #   networks:
  #     - internal
  #     - external
  #   cap_add:
  #     - NET_ADMIN
  #     - NET_RAW
  #     - NET_BIND_SERVICE
  #   depends_on:
  #     - initializer
  #     - redis
  #   environment:
  #     - RKN_DB_HOST=postgres
  #     - RKN_DB_USER=postgres
  #     - RKN_DB_PASSWORD=postgres
  #     - RKN_RQ_HOST=redis

  findings-worker:
    restart: always
    image: pablosnt/rekono-backend:unstable
    command: uv run --no-dev manage.py rqworker findings
    hostname: findings-worker
    volumes:
      - rekono:/rekono
    networks:
      - internal
      - external
    depends_on:
      redis:
        condition: service_healthy
      initializer:
        condition: service_completed_successfully
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
    
  monitor-worker:
    restart: always
    image: pablosnt/rekono-backend:unstable
    command: uv run --no-dev manage.py rqworker monitor
    hostname: monitor-worker
    volumes:
      - rekono:/rekono
    networks:
      - internal
      - external
    depends_on:
      redis:
        condition: service_healthy
      initializer:
        condition: service_completed_successfully
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis

  telegram-bot:
    restart: always
    image: pablosnt/rekono-backend:unstable
    command: uv run --no-dev manage.py telegram_bot
    hostname: telegram_bot
    container_name: telegram-bot
    volumes:
      - rekono:/rekono
    networks:
      - internal
      - external
    depends_on:
      redis:
        condition: service_healthy
      initializer:
        condition: service_completed_successfully
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
  
  backend:
    restart: always
    image: pablosnt/rekono-backend:unstable
    command: uv run --no-dev manage.py runserver 0.0.0.0:8000
    hostname: backend
    container_name: backend
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "http://localhost:8000/api/schema/swagger-ui.html"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    expose:
      - 8000
    volumes:
      - rekono:/rekono
    networks:
      - internal
    depends_on:
      redis:
        condition: service_healthy
      initializer:
        condition: service_completed_successfully
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - RKN_TRUSTED_PROXY=true
      - RKN_ALLOWED_HOSTS=*
  
  frontend:
    restart: always
    image: pablosnt/rekono-frontend:unstable
    hostname: frontend
    container_name: frontend
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "http://localhost:3000"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    expose:
      - 3000
    networks:
      - internal

  nginx:
    restart: always
    image: pablosnt/rekono-nginx:unstable
    hostname: nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - nginx:/etc/nginx/tls/
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - internal
      - external

volumes:
  postgres:
  nginx:
  rekono:

networks:
  internal:
    internal: true
  external:
