"""
Django settings for rekono project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
from typing import Any, Dict

from rekono.config import RekonoConfig

################################################################################
# Rekono basic information                                                     #
################################################################################

DESCRIPTION = (
    "Pentesting automation platform that combines hacking tools to complete assessments"
)
VERSION = "2.0.0"


################################################################################
# Load configuration                                                           #
################################################################################

CONFIG = RekonoConfig()


################################################################################
# Django                                                                       #
################################################################################

BASE_DIR = CONFIG.base_dir

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django_rq",
    "drf_spectacular",
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "taggit",
    "api_tokens",
    "authentications",
    "executions",
    "findings",
    "http_headers",
    "input_types",
    "integrations",
    "notes",
    "platforms.defect_dojo",
    "platforms.mail",
    "platforms.telegram_app",
    "parameters",
    "projects",
    "reporting",
    "security",
    "settings",
    "target_blacklist",
    "target_ports",
    "targets",
    "tasks",
    "tools",
    # Processes MUST be loaded after tools, as their fixtures need configuration fixtures to be loaded first
    "processes",
    "wordlists",
    # Users MUST be loaded at the latest place, as it will load permissions fixtures from all the other models
    "users",
]

MIDDLEWARE = [
    "security.middleware.SecurityMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "rekono.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "platforms" / "mail" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "rekono.wsgi.application"


################################################################################
# Security                                                                     #
################################################################################

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CONFIG.secret_key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = CONFIG.allowed_hosts

AUTH_USER_MODEL = "users.User"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "security.validators.input_validator.PasswordValidator",
    },
]

# JWT configuration
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "TOKEN_OBTAIN_SERIALIZER": "security.authentication.serializers.LoginSerializer",
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS512",
    "SIGNING_KEY": SECRET_KEY,
    "ISSUER": "Rekono",
}

LOGGING = {
    "version": 1,
    # Disable default Django logging system to avoid noise
    "disable_existing_loggers": False,
    "formatters": {
        "rekono": {
            "format": "%(asctime)s [%(levelname)s] - %(process)d %(module)s - %(source_ip)s - %(user)s - %(message)s"
        }
    },
    "filters": {
        "rekono": {
            "()": "rekono.logging.LoggingFilter",  # Custom logging filter
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "rekono",
            "filters": ["rekono"],
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": CONFIG.logs / "rekono.log",
            "maxBytes": 50 * 1024 * 1024,  # Max. 50 MB per file
            "backupCount": 10,
            "formatter": "rekono",
            "filters": ["rekono"],
        },
    },
    "loggers": {
        "root": {
            "handlers": ["console", "file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        }
    },
}


################################################################################
# API Rest                                                                     #
################################################################################

# nosemgrep: python.django.security.audit.django-rest-framework.missing-throttle-config.missing-throttle-config
REST_FRAMEWORK: Dict[str, Any] = {
    "DEFAULT_METADATA_CLASS": None,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
        "rest_framework.filters.SearchFilter",
    ],
    "DEFAULT_PAGINATION_CLASS": "framework.pagination.Pagination",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "security.authentication.api.ApiAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
        "security.authorization.permissions.RekonoModelPermission",
        "security.authorization.permissions.ProjectMemberPermission",
        "security.authorization.permissions.OwnerPermission",
    ],
    "EXCEPTION_HANDLER": "framework.exceptions.exceptions_handler",
}
if not CONFIG.testing:
    # Rate limit only for production
    REST_FRAMEWORK.update(  # pragma: no cover
        {
            "DEFAULT_THROTTLE_CLASSES": [
                "rest_framework.throttling.AnonRateThrottle",  # Rate limit for anonymous users
                "rest_framework.throttling.UserRateThrottle",  # Rate limit for authenticated users
                "rest_framework.throttling.ScopedRateThrottle",  # Rate limit for specific cases
            ],
            "DEFAULT_THROTTLE_RATES": {
                # 2 requests by second by IP
                # To allow requests from different users with same public IP address
                # Note that most API requests requires authentication
                "anon": "100/min",
                # 4 request by second by user
                # It is enough for legitimate usage, but attacks will be blocked
                "user": "300/min",
                # Prevent brute force attacks in login and refresh token features
                # Login is not authenticated, we can receive many requests from different users with same public IP address
                "login": "30/min",
                # The frontend can generate many refresh requests for the same user
                "refresh": "30/min",
                # It has to be hard enough to prevent brute force attacks
                "mfa": "5/min",
            },
        }
    )

# Documentation
SPECTACULAR_SETTINGS = {
    "TITLE": "Rekono API Rest",
    "DESCRIPTION": DESCRIPTION,
    "VERSION": VERSION,
    "PREPROCESSING_HOOKS": ["drf_spectacular.hooks.preprocess_exclude_path_format"],
    "SCHEMA_PATH_PREFIX_INSERT": CONFIG.root_path,
    "ENUM_NAME_OVERRIDES": {
        "AuthenticationType": "authentications.enums.AuthenticationType",
        "PathType": "findings.enums.PathType",
        "TargetType": "targets.enums.TargetType",
        "WordlistType": "wordlists.enums.WordlistType",
        "TimeUnit": "tasks.enums.TimeUnit",
    },
}


################################################################################
# Database                                                                     #
################################################################################

if CONFIG.testing:
    # In memory database for testing
    DATABASES = {
        "default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}
    }
else:
    # Production database
    DATABASES = {  # pragma: no cover
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": CONFIG.db_name,
            "USER": CONFIG.db_user,
            "PASSWORD": CONFIG.db_password,
            "HOST": CONFIG.db_host,
            "PORT": CONFIG.db_port,
        }
    }


################################################################################
# Redis Queues                                                                 #
################################################################################

default_rq_queue = {
    "HOST": CONFIG.rq_host,
    "PORT": CONFIG.rq_port,
    "DB": 0,
    "DEFAULT_TIMEOUT": 3600,  # 1 hour
}

RQ_QUEUES = {
    "tasks": default_rq_queue,
    "executions": default_rq_queue,
    "findings": default_rq_queue,
}

RQ_QUEUES["executions"]["DEFAULT_TIMEOUT"] = 28800  # 8 hours
RQ_QUEUES["findings"]["DEFAULT_TIMEOUT"] = 10800  # 3 hours


################################################################################
# Miscellaneous                                                                #
################################################################################

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [CONFIG.base_dir.parent / "frontend" / "public" / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
